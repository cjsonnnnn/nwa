pipeline {
  agent { label 'agent-azure-net' }

  tools {
    jfrog 'jfrog-cli'
  }

  options {
    buildDiscarder(logRotator(numToKeepStr: '5'))
  }

  parameters {
    string(
      name: 'IMAGE_TAG',
      description: 'Version tag (used for .NET publish ZIP and artifact versioning)'
    )
  }

  environment {
    AZURE_APP_ID = credentials('azure-app-id')
    AZURE_SECRET_KEY = credentials('azure-secret-key')
    AZURE_TENANT_ID = credentials('azure-tenant-id')
  }

  stages {
    stage('Build and Publish to Artifactory') {
      steps {
        sh "pwd"
        sh "ls -la"
        sh "ls -la $HOME"

        // ‚öôÔ∏è Set server to use 
        jf 'c use jfart-fos-1'

        // üî® Restore and build the .NET project
        retry(3) {
          sh "dotnet restore"
          sh "dotnet publish -c Release -o publish"
        }

        // üì¶ Zip published files
        sh "cd publish && zip -r ../app.zip . && cd .."
        sh "ls -lh app.zip"

        // üì§ Upload ZIP to Artifactory
        sh "jf rt u nwa.zip example-repo-local/dotnet/${params.IMAGE_TAG}/ --flat=true"

        // üìù Publish build info
        jf "rt bp"
      }
    }

    stage('Deploy to Azure App Service') {
      steps {
        sh "git --version"
        sh "which git"
        sh "pwd"
        sh "ls -la"
        sh "ls -la $HOME"

        // üîê Log in to Azure using Service Principal...
        sh "az version"
        sh '''
          az login --service-principal \
            --username "$AZURE_APP_ID" \
            --password "$AZURE_SECRET_KEY" \
            --tenant "$AZURE_TENANT_ID"
        '''
        sh "az account show"

        // üîΩ Download published ZIP from Artifactory
        retry(3) {
          sh "jf rt dl example-repo-local/dotnet/${params.IMAGE_TAG}/nwa.zip --flat=true"
        }

        // üöÄ Deploy the JAR to App Service
        sh """
          az webapp deploy \
            --resource-group BelugaBoxResourceGroup01 \
            --name NWAAppServiceCodeTEST \
            --src-path nwa.zip \
            --type zip
        """
      }
    }
  }

  // post {
  //   always {
  //     node('agent-azure') {
  //       script {
  //         // To prevent credentials being cached in memory or reused in other builds, and improve security
  //         sh "az logout || true"

  //         // Deletes all files/folders from the Jenkins agent's workspace
  //         // Ensures next builds start fresh, avoiding stale or leftover files (e.g., JARs, artifacts, Dockerfiles, logs).
  //         sh "ls -alR ${env.WORKSPACE}"
  //         cleanWs()
  //         sh "ls -alR ${env.WORKSPACE}"
  //       }
  //     }
  //   }
  // }
}
