pipeline {
  agent { label 'agent-azure-net' }

  options {
    buildDiscarder(logRotator(numToKeepStr: '5'))
    skipDefaultCheckout(true)
  }

  environment {
    APP_NAME = "nwa"
    DOCKERHUB_REPO = "jpiay/${APP_NAME}"
    VM_HOST = "lab3@192.168.18.23"
    VM_SSH = credentials('ssh-vm-lab3')
  }

  stages {
    stage('Prepare Version') {
      steps {
        script {
          currentBuild.displayName = "Release-${currentBuild.number}"
          env.APP_VERSION = "${params.IMAGE_TAG.tokenize(' ')[0]}"
        }
      }
    }

    stage('Approval for Production') {
      when {
        expression { params.DEPLOY_ENV == 'PROD' }
      }
      steps {
        script {
          timeout(time: 1, unit: 'HOURS') {
            input message: "Approve deployment to Production?",
                  ok: "Deploy Now", submitter: "manager"
          }
        }
      }
    }

    stage('Deploy Docker Image to Azure') {
      steps {
        script {
          // 🔒 Create SSH key file securely
          writeFile file: 'vm_key.pem', text: VM_SSH
          sh 'chmod 600 vm_key.pem'

          // 💨 SSH into VM and deploy container
          sh """
            ssh -i vm_key.pem -o StrictHostKeyChecking=no ${VM_HOST} << 'EOF'
              echo "🚀 Pulling image: ${DOCKERHUB_REPO}:${APP_VERSION}"
              docker pull ${DOCKERHUB_REPO}:${APP_VERSION}

              echo "🛑 Stopping old container..."
              docker stop ${APP_NAME} || true
              docker rm ${APP_NAME} || true

              echo "▶️ Starting new container..."
              docker run -d --name ${APP_NAME} -p 8080:80 ${DOCKERHUB_REPO}:${APP_VERSION}

              echo "✔️ Deployment completed on VM."
            EOF
          """

          // 🧾 Report deployment to DevOps Portal
          reportDeployOperation(
            targetService: params.DEPLOY_ENV,
            applicationName: env.APP_NAME,
            applicationVersion: env.APP_VERSION,
            tags: env.APP_VERSION
          )
        }
      }
    }
  }
}
